Rapport de projet traduction des langages
Les tables de symboles:
Je crois qu’on doit créer les classes INFO suivantes:
- INFOCLASS
- INFOATTRIBUT
- INFOMETHOD
- INFOVAR
- INFOTYPE
- INFOPARAM //je suis pas sure mais peut être on aura besoin
Pour la tds
-  t:= new TDS(nil);
   // transmettre la table à CLASSES
   CLASSES^tds:=t; // elle correspond à la table ou il y a les classes
-   t :=  new TDS(DEFCLASSE^tds); 
   // transmettre la table à CORPS avec la tds parente est celle des classes.
   CORPS^tds := t;
    Donc chaque classe aura sa propore table de symbole.
    Chaque méthode et chaque attribut de la classe sera ajouté dans cette table.
-  t:= BLOC^tds; // maitenant pour les blocs: tout bloc aura sa propore table
INSTS^tds:= new TDS(t);

Remarque sur la Surcharge (youssra c'est pour toi cette remarque puisque c'est toi qui fait la classe method, il faut
ajouter au nom de la methode les types de ses paramètres par exemple creerPoint(int x, int y) => creerPoint_int_int)

Certains langages permettent d'utiliser un même nom pour différentes fonctions pour autant que leurs arguments 
diffèrent en nombre et/ou en types. Nous devons donc alors maintenir une collection comme valeur, car nous aurons
des collisions au niveau des noms.

Signature de fonctions
Nous pouvons éviter ce genre de collision si nous utilisons un identifiant adapté à la « signature » de la méthode :
par exemple une concaténation du nom de la fonction et des types de ses arguments dans l'ordre.


Ce qu'on a fait(01/06):
   - Une table de symboles pour les classes déclarée pour CLASSES et DEFCLASSE: table de prog
   - Une table de symboles pour les méthodes, les constructeurs et les attributs d'une classe déclarée pour
   CORPS,DEF : table de classe.
   - Une table pour chaque bloc où on définit les variables locales. 
   - Une table pour les paramètre tdsParam à donner aux blocs de chaque méthode.
   - Une liste de types de paramètres à donner à la tds de la classe pour garder les signatures des méthodes.
   
On commence les types:
   - 
   - Pour les variables locales on ne cherche pas dans la tds des attributs.
   
   -On doit ajouter les méthodes et attributs et la classe mère à la INFOCLASS au niveau java et pas que à la tds.
et on doit faire la même chose pour INFOATTRIbute et infomethod...
   -Pourquoi setparent dans infoclass est une fonction je l'ai changé en methode.


Les changements effectués:
   - Dans infoClass les listes d'attributs et des méthodes sont des tds pour garder aussi le nom.
   - Séparation entre les constructeurs et les méthodes: je ne sais pas utile ou pas.
   - Une fonction doit avoir une instruction retour
   - j'ai ajouté à chaque classe un constructeur par défaut.
   - null est compatible avec tout les types.


Trucs à faire pour la génération du code:
   - ecrire genNull dans tam.java
   - Donner la taille de la classe dans DEFCLASS, taille de la classe= taille des attributs
   - ajouter une etiquette au constrtucteur par défaut.
   
   
Questions:
   - Quand on fait un new Point() on fait une allocation de mémoire de la taille des attributs de point, mais le problème 
comment savoir cette taille avant de finir la classe.Je vous donne un exemple:
* si dans la classe Point ou il ya x et y comme attributs
dans un bloc de méthode je crée un Point, lors de la création il ya allocation de mémoire de taille 2.
Mais si après cette méthode j'ajoute un attribut z, la taille de point augmente!!


Choix pris concernant la taille de la classe:
   - Lors de la définition d'une classe règle DEFCLASS, on crée une classe de taille =0 si elle na' pas de mère
   et de la taille de sa mère si elle en a une.
   - A chaque fois qu'on ajoute un attribut on augmente la taille de la classe en ajoutant la taille d'un attribut.
   - Donc un attribut a une taille ou plutot son type a une taille.

-   Ajouter à l’étiquette des méthodes la signature.
-	Ajouter un attribut num à infomethod. 
-	Dans l’appel d’une procedure on récupère son num
-	On ajoute la partie du code(jump) qui existe à la case numéro num dans la table virtuelle.

-	une table virtuelle sera crée à la création de la classe, on ajoute à la création les méthodes de sa mère.

-	Le numéro dans l’info méthode sera récupéré par infoclass=> donc il faut ajouter un compteur dans infoclass qui donne le numéro de la méthode, ce numéro sera initialisé à la création de l’infoclass (0 si pas de parent, sinon nombre de méthode de la mère)


Question : une méthode peut avoir le même nom qu’un attribut.
Reste à faire :
-	Gestion de la’ppel de methode : parametre , lien statique
+ Gestion de this(gestion de param) 
-	Gestion de super : on fait call au constructeur de la mère avec les paramètres données.
Changement effectué :
-	Lors d’une affectation, on teste si l’élement à gauche est une adresse ou pas, on récupère cette information grace à un attribut synthétisé est_adresse, selon le résulat on fait ou bien un STOREI ou un STORE(n) @var(code ajouté au niveau de la règle F->ident
-	A la création d’un constructeur il faut alloué de la place this en 3[LB]
-	Pour une méthode this est dans -1[LB], on fait un genMalloc(taille) + LAODA-1[LB] puis STOREI(taille)
-	La taille d'une classe est la somme des tailles de ses attributs

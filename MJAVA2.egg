-- PROJET3 STL 11-12 - micro java : grammaire 
option auto= true;
option version = 0.0.0 ;
option k=3;

-- les attributs semantiques
inh source : MJAVASourceFile for PROGRAMME;
inh machine : AbstractMachine for DEFCLASSE, ENTITES, DEFINTERFACE,CORPS,DEF,DEFS,MCORPS,BLOC,E,ER,AFFX,ES,ERX,T,ESX,TX,Q,INSTS,INST,SIX,OPREL,OPADD,OPMUL,F,OPUN, ARGS, ARGSX;
inh tds : TDS for ENTITES, DEFCLASSE, DEFINTERFACE, SUPER, CORPS, ETEND, IMPL, DEF, DEFS, TYPE, PARF,PARFS,PARFSX,BLOC,INSTS,INST,MCORPS,SIX,E,ER,ERX,ES,ESX,T,TX,F,Q,ARGS,ARGSX,AFFX;
inh infoE : InfoEntite for SUPER, CORPS, ETEND, IMPL, DEFS, DEF, MCORPS,TYPE, PARF,PARFS,PARFSX,BLOC,INSTS,INST,SIX,E,ER,ERX,ES,ESX,T,TX,F,Q,ARGS,ARGSX,AFFX;
inh tda : TDS for DEFS, DEF ;
inh tdm : TDS for DEFS, DEF, MCORPS, BLOC, INSTS, INST, SIX, E, ER, ES, T, F, Q, AFFX, ERX, ESX, TX, ARGSX,ARGS;
inh tdc : TDS for DEFS, DEF, MCORPS, BLOC, INSTS, INST, SIX, E, ER, ES, T, F, Q, AFFX, ERX, ESX, TX, ARGSX,ARGS;
inh tvM : TvMeth for DEFS, DEF ;
inh tdv : TDS for PARFS, PARF , PARFSX, MCORPS, BLOC, INSTS, INST, SIX, E, ER, ES, T, F, Q, AFFX, ERX, ESX, TX,ARGSX,ARGS;
inh tdsv : TDS for ARGS, ARGSX;
inh htype : DTYPE for Q ;
syn type : DTYPE for TYPE,E,F,T,ES,ER,Q,AFFX,ERX,ESX,TX;
syn optype : String for OPREL,OPADD,OPMUL,OPUN;
syn typeRetour : DTYPE for INST, INSTS, BLOC, SIX , MCORPS;
syn code1 : String for ER,ES,T,ERX,ESX,TX,F,Q ;
syn code2 : String for ER,ES,T,ERX,ESX,TX,F,Q ;
syn code : String for DEFCLASSE, ENTITES, CORPS, DEFS, DEF,MCORPS,BLOC,INSTS,INST,SIX,AFFX,E,OPREL,OPADD,OPMUL,OPUN,ARGS,ARGSX; 
inh hcode1 : String for Q;
inh hcode2 : String for Q;
syn codeArg :String for Q ;
inh hvar : INFOVAR for Q;
syn taille : INTEGER for PARFS,PARF,PARFSX ;
inh htaille : INTEGER for MCORPS, BLOC, INSTS, INST,SIX,AFFX,ARGS,ARGSX,Q,E,ER,ES,T,ERX,ESX,OPREL,OPADD,TX,OPMUL,F;
syn etiq : String for SIX ;
syn adr : INTEGER for INST,INSTS;
inh hadr : INTEGER for MCORPS,BLOC, INSTS, INST,SIX;
inh hdep : INTEGER for PARF, PARFS,PARFSX, DEFS, DEF ;
syn dep : INTEGER for DEF ;
syn main : String for DEF,DEFS,CORPS, DEFCLASSE, DEFINTERFACE, ENTITES;

-- les terminaux 

space separateur is  "[\r\n\t ]+";     
space comm is  "\/\/[^\n]*\n";
sugar paro is  "\(";
sugar parf is  "\)";
sugar aco is  "\{";     
sugar acf is  "\}"; 
sugar cro is  "\["; 
sugar crf is  "\]";
sugar virg is  ",";
sugar pv is  "\;";
sugar pt is  "\.";
sugar affect is  "=";
sugar si is  "if";
sugar sinon is  "else";
sugar void is  "void";
sugar int is  "int";
sugar bool is  "boolean";
sugar classe is  "class";
sugar interface is  "interface";
sugar etend is  "extends";
sugar implemente is  "implements";
sugar retour is  "return";
sugar nouveau is  "new";
sugar null is  "null";
sugar inf is  "\<";
sugar infeg is  "\<=";
sugar sup is  "\>";
sugar supeg is  "\>=";
sugar eg is  "==";
sugar neg is  "\!=";
sugar plus is  "\+";
sugar moins is  "\-";
sugar ou is  "\|\|";
sugar mult is  "\*";
sugar div is  "\/";
sugar mod is  "\%" ; 
sugar et is  "\&\&";
sugar non is  "\!";
sugar vrai is  "true";
sugar faux is  "false";
term entier is  "[0-9]+";
term ident is  "[_A-Za-z][_0-9A-Za-z]*";

---------- REGLES DE PRODUCTION ----------------------------------------
PROGRAMME -> #init ENTITES #gen ;
global
   machine : AbstractMachine;
    t: TDS ;
#init {
local
do
   t := new TDS();
   ENTITES^tds := t;
   machine := PROGRAMME^source.getMachine();
   ENTITES^machine := machine;
end
}
#gen {
local
    s : String ;
do
    s := "\tLOADL 0\n\tLOADA "+ENTITES^main+"\n\tCALLI\n\tHALT";
    call machine.writeCode(PROGRAMME^source.getFileName(),  s+ENTITES^code);
end
}

ENTITES -> #gen ;
#gen {
do
    -- HALT
    ENTITES^main := "" ;
    ENTITES^code := "" ;
end
}

ENTITES -> DEFCLASSE ENTITES #gen ;
#gen {
do
    ENTITES^code := DEFCLASSE^code + ENTITES1^code;
    if ~DEFCLASSE^main.equals("") then
        ENTITES^main := DEFCLASSE^main ;
    else if ~ENTITES1^main.equals("") then
             ENTITES^main := ENTITES1^main;
        else
             ENTITES^main := "" ;
        end
    end
end
}

ENTITES -> DEFINTERFACE ENTITES #gen;
#gen {
do
    ENTITES^code := ENTITES1^code;
    if ~DEFINTERFACE^main.equals("") then
        ENTITES^main := DEFINTERFACE^main ;
    else if ~ENTITES1^main.equals("") then
             ENTITES^main := ENTITES1^main;
        else
             ENTITES^main := "" ;
        end
    end
end
}

-- definition d'une classe
DEFCLASSE -> classe ident #tds SUPER CORPS #gen;
#tds {
local
    i : INFO ;
    c : TDS ;
    i1 : InfoEntite ;
    s : String ;
do
    i := DEFCLASSE^tds.chercherLocalement(ident^txt);
    if i/=nil then
        error(B_00,ident^txt);
    else
        c := new TDS(DEFCLASSE^tds);
        i1 := new INFOCLASSE(c,ident^txt);
        call DEFCLASSE^tds.inserer(ident^txt,i1);
        SUPER^infoE := i1 ;
        CORPS^infoE := i1 ;
        SUPER^tds := c ;
        CORPS^tds := c ;        
    end    
end
}
#gen {
do
    DEFCLASSE^code := "\n\n" + DEFCLASSE^machine.genComment("classe "+ ident^txt) + "\n\n" + CORPS^code;
    DEFCLASSE^main := CORPS^main ;
end
}

--DEFCLASSE -> classe ident etend ident CORPS ;
--DEFCLASSE -> classe ident implemente ident CORPS ;
DEFINTERFACE -> interface ident #tds SUPER CORPS #main ;
#tds {
local
    i : INFO ;
    c : TDS ;
    i1 : InfoEntite ;
do
    i := DEFINTERFACE^tds.chercherLocalement(ident^txt);
    if i/=nil then
        error(B_00);
    else
        c := new TDS(DEFINTERFACE^tds);
        i1 := new INFOINTERFACE(c,ident^txt);
        call DEFINTERFACE^tds.inserer(ident^txt,i1);
        SUPER^infoE := i1 ;
        CORPS^infoE := i1 ;
        SUPER^tds := c ;
        CORPS^tds := c ;        
    end    
end
}
#main{
do
    DEFINTERFACE^main := CORPS^main ;
end
}

--DEFINTERFACE -> interface ident etend ident CORPS;
-- 1 extends maximum suivi d'un implements maximum
SUPER -> ETEND IMPL ;
ETEND -> ;
ETEND -> etend ident #tds ;
#tds {
local
    s : String ;
    i : INFO ;
    t1 : TDS ;
    t2 : TDS ;
    m : TvMeth ;
do 
    s := ETEND^infoE.getNom();
    if s.equals(ident^txt) then 
        error(B_01,ident^txt);
    else 
        i:= ETEND^tds.chercherGlobalement(ident^txt);
        if i=nil then
            error(B_02,ident^txt);
        else
            if ~(ETEND^infoE.compareTo(i)) then
                error(B_05);
            else
                call ETEND^infoE.setHerite(ident^txt);
                t1 := i.getTDA();
                t2 := i.getTDM();
                m := i.getMaTvMeth() ;
                call ETEND^infoE.setAttHerite(t1);
                call ETEND^infoE.setMethHerite(t2);
                call ETEND^infoE.setTvMeth(m);
            end
        end
    end    
end
}

IMPL -> ;
IMPL -> implemente ident #tds;
#tds {
local
    s : String ;
    i : INFO ;
    it : INFOINTERFACE ;
    c : INFOCLASSE ;
    t : TDS ;
do 
    s := IMPL^infoE.getNom();
    if s.equals(ident^txt) then 
        error(B_01,ident^txt);
    else 
        i:= IMPL^tds.chercherGlobalement(ident^txt);
        if i=nil then
            error(B_02,ident^txt);
        else
            it := new INFOINTERFACE(IMPL^tds,"");
            if ~(it.compareTo(i)) then 
                error(B_03, ident^txt);
            else
                c := new INFOCLASSE(IMPL^tds,"");
                if ~(c.compareTo(IMPL^infoE)) then
                    error(B_04);
                else
                    call IMPL^infoE.setImpl(ident^txt);
                    t := i.getTDM();
                    call IMPL^infoE.setMethImpl(t);
                end
            end
        end
    end    
end
}

CORPS -> aco #tds DEFS acf #gen ;
